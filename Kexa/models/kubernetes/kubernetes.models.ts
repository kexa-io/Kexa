export interface KubernetesResources {
    namespaces: Array<any>;
    pods: Array<any>;
    services: Array<any>;
    helm: Array<any>;
    configmap: Array<any>;
    deployment: Array<any>;
    replicaset: Array<any>;
    statefulset: Array<any>;
    daemonset: Array<any>;
    job: Array<any>;
    cronjob: Array<any>;
    ingress: Array<any>;
    persistentvolume: Array<any>;
    persistentvolumeclaim: Array<any>;
    secret: Array<any>;
    serviceaccount: Array<any>;
    role: Array<any>;
    rolebinding: Array<any>;
    clusterrole: Array<any>;
    clusterrolebinding: Array<any>;
    storageclass: Array<any>;
    networkpolicy: Array<any>;
    podsecuritypolicy: Array<any>;
    limitrange: Array<any>;
    resourcequota: Array<any>;
    horizontalpodautoscaler: Array<any>;
    verticalpodautoscaler: Array<any>;
    priorityclass: Array<any>;
    customresourcedefinition: Array<any>;
    poddisruptionbudget: Array<any>;
    event: Array<any>;
    endpoint: Array<any>;
    node: Array<any>;
    podtemplate: Array<any>;
    mutatingwebhookconfiguration: Array<any>;
    validatingwebhookconfiguration: Array<any>;
    apiservice: Array<any>;
    controllerrevision: Array<any>;
    lease: Array<any>;
    certificate: Array<any>;
    certificateSigningRequest: Array<any>;
    componentstatus: Array<any>;
    hpa: Array<any>;
    podLogs: Array<any>;
    podsConsumption: Array<any>;
}

export function createKubernetesResourcesDefault(): KubernetesResources {
    return {
        namespaces: [],
        pods: [],
        services: [],
        helm: [],
        configmap: [],
        deployment: [],
        replicaset: [],
        statefulset: [],
        daemonset: [],
        job: [],
        cronjob: [],
        ingress: [],
        persistentvolume: [],
        persistentvolumeclaim: [],
        secret: [],
        serviceaccount: [],
        role: [],
        rolebinding: [],
        clusterrole: [],
        clusterrolebinding: [],
        storageclass: [],
        networkpolicy: [],
        podsecuritypolicy: [],
        limitrange: [],
        resourcequota: [],
        horizontalpodautoscaler: [],
        verticalpodautoscaler: [],
        priorityclass: [],
        customresourcedefinition: [],
        poddisruptionbudget: [],
        event: [],
        endpoint: [],
        node: [],
        podtemplate: [],
        mutatingwebhookconfiguration: [],
        validatingwebhookconfiguration: [],
        apiservice: [],
        controllerrevision: [],
        lease: [],
        certificate: [],
        certificateSigningRequest: [],
        componentstatus: [],
        hpa: [],
        podLogs: [],
        podsConsumption: []
    };
}